name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies with uv
        run: |
          uv venv
          uv sync --all-extras

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci-$(openssl rand -hex 32)" >> $GITHUB_ENV
          echo "DEBUG=False" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          source .venv/bin/activate
          python manage.py migrate

      - name: Run Django tests
        run: |
          source .venv/bin/activate
          python manage.py test

      - name: Run Django check
        run: |
          source .venv/bin/activate
          python manage.py check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies with uv
        run: |
          uv venv
          uv sync

      - name: Run black code formatting check
        run: |
          source .venv/bin/activate
          black --check .

      - name: Run mypy type checking
        run: |
          source .venv/bin/activate
          mypy .
